name: Deploy (reusable)
description: Builds a Docker image, and pushes it to the registry

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

      ref:
        description: "Branch to deploy (default: main)"
        type: string
        default: main

env:
  REGISTRY: us-docker.pkg.dev

concurrency:
  group: deploy-${{ inputs.environment }}
  cancel-in-progress: false

jobs:
  docker-build-push:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    permissions:
      # Read/write GHA cache.
      actions: write
      # Checkout.
      contents: read
      # Authenticate with GCP.
      id-token: write

    steps:
      - name: Checkout (rumba)
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Docker setup
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: GCP auth
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          service_account: artifact-writer@${{ secrets.GCP_PROJECT_NAME }}.iam.gserviceaccount.com
          workload_identity_provider: projects/${{ secrets.WIP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions

      - name: Gather GIT_SHA and IMAGE_TAGS
        id: gather-build-metadata
        run: |
          IMAGE_PREFIX="${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_NAME }}/${{ secrets.GAR_REPOSITORY }}/rumba"

          GIT_SHA="$(git rev-parse HEAD)"
          IMAGE_TAGS="$IMAGE_PREFIX:$GIT_SHA"

          if [ "${{ inputs.environment }}" = "production" ]; then
            IMAGE_TAGS="$IMAGE_TAGS,$IMAGE_PREFIX:${{ github.ref_name }}"
          fi

          echo "GIT_SHA=$GIT_SHA" >> "$GITHUB_OUTPUT"
          echo "IMAGE_TAGS=$IMAGE_TAGS" >> "$GITHUB_OUTPUT"

      - name: Docker login
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - name: Build and push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          build-args: |
            GIT_SHA=${{ steps.gather-build-metadata.outputs.GIT_SHA }}
          tags: ${{ steps.gather-build-metadata.outputs.IMAGE_TAGS }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
